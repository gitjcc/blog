<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  <subtitle>CS从入门到放弃</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://gitjcc.github.io/blog/"/>
  <updated>2017-05-14T07:33:35.264Z</updated>
  <id>https://gitjcc.github.io/blog/</id>
  
  <author>
    <name>Jesse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 参数传递</title>
    <link href="https://gitjcc.github.io/blog/2017/JS%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>https://gitjcc.github.io/blog/2017/JS参数传递/</id>
    <published>2017-05-13T13:10:27.563Z</published>
    <updated>2017-05-14T07:33:35.264Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论一下, 我对JS 参数传递的理解.</p>
<h1 id="求值策略"><a href="#求值策略" class="headerlink" title="求值策略"></a>求值策略</h1><p><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" target="_blank" rel="external">Evaluation strategy -wikipedia</a></p>
<p>其中call-by-sharing可以认为是特殊的call-by-value.</p>
<a id="more"></a>
<h1 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h1><p>JS有7种数据类型，其中Undefined、Null、Boolean、Number、String、Symbol可以称为基本类型，Object可以称为引用类型。</p>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>栈（stack）: 栈内存, 用来存放基本类型值和引用类型值在堆内存中的地址.</p>
<p>堆（heap）: 堆内存, 用来存放所有引用类型值.</p>
<h1 id="JS-变量"><a href="#JS-变量" class="headerlink" title="JS 变量"></a>JS 变量</h1><p>所谓变量的类型即其对应值的类型，因此变量可以分为基本类型、引用类型。</p>
<h3 id="变量存储"><a href="#变量存储" class="headerlink" title="变量存储"></a>变量存储</h3><ul>
<li>基本类型值: 存储在栈内存中，即直接存储在变量访问的位置。这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域(栈)中。这样存储便于迅速查寻变量的值。</li>
<li>引用类型值: 存储在堆内存中, 即变量标识的栈内存存储的是地址值(或者叫指针pointer), 指向存储引用类型值的堆内存地址.这是因为引用类型值占用的内存大小会改变，所以不能把它放在栈内存中，否 则会降低变量查寻的速度。</li>
</ul>
<h3 id="变量修改"><a href="#变量修改" class="headerlink" title="变量修改"></a>变量修改</h3><ul>
<li>基本类型: 基本类型值一旦创建,不能被修改.</li>
<li>引用类型: 直接给变量赋值,改变的是栈内存的地址值,使变量指向了另一块堆内存,原值不变. 修改变量的属性值, 是改变值本身,地址不变.</li>
</ul>
<h3 id="变量复制"><a href="#变量复制" class="headerlink" title="变量复制"></a>变量复制</h3><p>当从一个变量向另一个变量复制值时</p>
<ul>
<li>基本类型: 复制值到新变量标识的位置 (即call-by-value)</li>
<li>引用类型: 复制地址值(指针pointer)到新变量标识的位置 (即call-by-sharing)</li>
</ul>
<h1 id="JS-函数参数"><a href="#JS-函数参数" class="headerlink" title="JS 函数参数"></a>JS 函数参数</h1><p>ECMAScript 中函数参数的传递与变量的复制相同, 基本类型传递的是数据值, 引用类型传递的是地址值. </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ECMAScript 中存在call-by-value和call-by-sharing两种求值策略. 如果认为call-by-sharing是特殊的call-by-value, 那么可以说ECMAScript 中所有函数的参数都是按值传递的。但说按引用传递(call-by-reference)是没有道理的.</p>
<h1 id="Reference-amp-Further-reading"><a href="#Reference-amp-Further-reading" class="headerlink" title="Reference &amp; Further reading"></a>Reference &amp; Further reading</h1><p><a href="https://www.zhihu.com/question/27114726" target="_blank" rel="external">javascript传递参数如果是object的话，是按值传递还是按引用传递？</a></p>
<p><a href="https://www.zhihu.com/question/51018162" target="_blank" rel="external">JavaScript中函数都是值传递吗？</a></p>
<p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/#more-864" target="_blank" rel="external">ECMA-262-3 in detail. Chapter 8. Evaluation strategy.</a></p>
<p><a href="http://skilldrick.co.uk/2010/12/clearing-up-the-confusion-around-javascript-references/" target="_blank" rel="external">Clearing up the confusion around JavaScript references</a></p>
<p><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" target="_blank" rel="external">Evaluation strategy -wikipedia</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讨论一下, 我对JS 参数传递的理解.&lt;/p&gt;
&lt;h1 id=&quot;求值策略&quot;&gt;&lt;a href=&quot;#求值策略&quot; class=&quot;headerlink&quot; title=&quot;求值策略&quot;&gt;&lt;/a&gt;求值策略&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;Evaluation strategy -wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中call-by-sharing可以认为是特殊的call-by-value.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 数据类型</title>
    <link href="https://gitjcc.github.io/blog/2017/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://gitjcc.github.io/blog/2017/JS数据类型/</id>
    <published>2017-05-13T07:48:10.475Z</published>
    <updated>2017-05-14T08:06:06.186Z</updated>
    
    <content type="html"><![CDATA[<p>本文试图讨论 JavaScript 的数据类型，和数据类型的判断。</p>
<h2 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h2><p>JavaScript 是一种弱类型语言或者动态语言。即变量的类型是动态的，同一个变量可以保存不同类型的值。变量的类型就是值的类型，因此变量不用提前声明类型，变量的类型会在程序运行的过程中被确定。</p>
<a id="more"></a>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>根据目前最新的 ECMAScript 标准，JavaScript 的数据类型一共有七种。（其中 Symbol 是ECMAScript 6 中新定义的类型。）</p>
<p>7 种数据类型：</p>
<ul>
<li>Boolean : 布尔类型</li>
<li>Number : 数值类型</li>
<li>String : 字符串类型</li>
<li>Undefined : Undefined 类型</li>
<li>Null : Null 类型</li>
<li>Symbol : 符号类型</li>
<li>Object : 对象</li>
</ul>
<p>其中 Boolean、Number、String、Undefined、Null、Symbol可以称为简单类型（primitive type），而 Object 可以称为复杂类型（complex type）。<br>简单类型的值一旦被创建，就不能被修改，只有复杂类型 Object 的值可以被修改。</p>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型表示逻辑数据，可以有 true 和 false 两个值。</p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>数值类型表示数字，值包括基于 IEEE 754 标准的双精度 64 位二进制格式的浮点数、+Infinity、-Infinity、NaN。</p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型表示文本数据，值由零个或多个字符组成。</p>
<h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><p>Undefined 类型表示值不确定，只有一个值: undefined。</p>
<h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><p>Null 类型表示有值，值为空，只有一个值: null。</p>
<h3 id="符号类型"><a href="#符号类型" class="headerlink" title="符号类型"></a>符号类型</h3><p>符号类型是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在计算机科学中, 对象是指内存中的可以被 标识符 引用的一块区域.<br>其他数据类型之外的所有数据都是对象类型。Array、Function可以看作是特殊的Object。</p>
<h2 id="数据类型的判断"><a href="#数据类型的判断" class="headerlink" title="数据类型的判断"></a>数据类型的判断</h2><p>4种方法: typeof、instanceof、constructor、Object.prototype.toString</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof操作符返回一个字符串,指示未经计算的操作数的类型。</p>
<ul>
<li>Undefined “undefined”</li>
<li>Null “object”</li>
<li>Boolean “boolean”</li>
<li>Number “number”</li>
<li>String “string”</li>
<li>Symbol “symbol”</li>
<li>函数对象 “function”</li>
<li>任何其他对象 “object”</li>
</ul>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor属性返回一个指向创建了该对象原型的函数引用。</p>
<h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h3><p>toString() 方法返回一个表示该对象的字符串。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ul>
<li>typeof 只能检测基本数据类型，对于null还有Bug；</li>
<li>instanceof 适用于检测对象，它是基于原型链运作的；</li>
<li>constructor 指向的是最初创建者，而且容易伪造，不适合做类型判断；</li>
<li>instanceof 和 constructor 都是基于引用判等的类型检查，都会有跨窗口问题。</li>
<li>Object.prototype.toString 适用于内置类型（包括基本数据类型和内置对象）的类型判断；</li>
</ul>
<h1 id="Reference-amp-Further-reading"><a href="#Reference-amp-Further-reading" class="headerlink" title="Reference &amp; Further reading"></a>Reference &amp; Further reading</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="external">JavaScript 数据类型和数据结构 - MDN</a></p>
<p><a href="https://segmentfault.com/q/1010000000464600" target="_blank" rel="external">如何正确判断js数据类型</a></p>
<p><a href="http://harttle.com/2015/09/18/js-type-checking.html" target="_blank" rel="external">如何检查JavaScript变量类型？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文试图讨论 JavaScript 的数据类型，和数据类型的判断。&lt;/p&gt;
&lt;h2 id=&quot;动态类型&quot;&gt;&lt;a href=&quot;#动态类型&quot; class=&quot;headerlink&quot; title=&quot;动态类型&quot;&gt;&lt;/a&gt;动态类型&lt;/h2&gt;&lt;p&gt;JavaScript 是一种弱类型语言或者动态语言。即变量的类型是动态的，同一个变量可以保存不同类型的值。变量的类型就是值的类型，因此变量不用提前声明类型，变量的类型会在程序运行的过程中被确定。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CS从入门到放弃</title>
    <link href="https://gitjcc.github.io/blog/2017/CS%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>https://gitjcc.github.io/blog/2017/CS从入门到放弃/</id>
    <published>2017-05-07T14:58:44.839Z</published>
    <updated>2017-05-14T07:36:09.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CS从入门到放弃"><a href="#CS从入门到放弃" class="headerlink" title="CS从入门到放弃"></a>CS从入门到放弃</h1><p>这个博客用来记录自己在CS世界中的学习、心得和思考。</p>
<a id="more"></a>
<h1 id="入门-todo"><a href="#入门-todo" class="headerlink" title="入门 (todo)"></a>入门 (todo)</h1><p>CS, Computer Science计算机科学。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul>
<li>git &amp; github</li>
<li>vscode &amp; webstorm</li>
<li>hexo &amp; jekyll</li>
</ul>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li>webpack</li>
</ul>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul>
<li>JS &amp; ES &amp; TS</li>
<li>Vue &amp; React</li>
<li>Koa &amp; Express</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul>
<li>Python</li>
<li>Flask</li>
</ul>
<h1 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h1><p>当你的眼中不再只有CS，才能真的认识CS。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CS从入门到放弃&quot;&gt;&lt;a href=&quot;#CS从入门到放弃&quot; class=&quot;headerlink&quot; title=&quot;CS从入门到放弃&quot;&gt;&lt;/a&gt;CS从入门到放弃&lt;/h1&gt;&lt;p&gt;这个博客用来记录自己在CS世界中的学习、心得和思考。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
